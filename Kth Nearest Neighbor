#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug 25 18:47:18 2019

@author: samchristian
"""
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
from astropy.coordinates import SkyCoord
from astropy import units as u
from sklearn.metrics.pairwise import haversine_distances as haversine
import pandas as pd
import time
import seaborn as sns
from scipy import stats
from statistics import mean
import random
sns.set_color_codes()
data = pd.read_csv(r'/Users/samchristian/Downloads/grb-frompaper.csv')
#pfinds the kth nearest neighbor. All redshift groups are compared (for the four group case)
data_different = data.loc[(data['z'] <= 9.4) & (data['z'] >= 2.68)]
data_different1 = data.loc[(data['z'] < 0.85) & (data['z'] >= 0.0085)]
data_different2 = data.loc[(data['z'] < 1.614) & (data['z'] >= 0.85)]
data_new = data.loc[(data['z'] < 2.68) & (data['z'] >= 1.614)]
ras1 = data_different.loc[:, ['ra']].values
decs1 = data_different.loc[:, ['dec']].values
ras4 = data_different1.loc[:, ['ra']].values
decs4 = data_different1.loc[:, ['dec']].values
ras3 = data_different2.loc[:, ['ra']].values
decs3 = data_different2.loc[:, ['dec']].values
ras2 = data_new.loc[:, ['ra']].values
decs2 = data_new.loc[:, ['dec']].values

def print_random_star_coords(nstars):
    dec = np.arcsin(np.random.random(1)*2-1)
    RA = np.random.random(1)*2*np.pi
    return [dec[0], RA[0]]
def nearest_neighbor(points):
    k = 0
    while k < len(points):
        distances = []
        point = points[k]
        j = 0
        while j < len(points):
            if k == j:
                j += 1
                continue
            distance = haversine([point, points[j]])[0][1]*180/np.pi
            distances.append(distance)
            j += 1
        ascending = sorted(distances)
        for m in ascending:
            final_distributions.append(m)
            #final_distributions is unnesecary
        closest_points.append(ascending[31]) #change 29 to kth nearest neighbor
        #closest_points is the kth nearest neighbor
        k += 1

final_distributions = []
n = 0
test_radii = 10000
l = 0
points1 = []
num = 90
#iter_2 is number of iterations. 5000 is used for the paper
iter_2 = 1000
l = 0
#comment this to generate with extinction
while l < (num*iter_2 + 1): 
    point = print_random_star_coords(1)
    points1.append(point)
    l += 1

#uncomment this to generate with extinction
    
#while l < 6*iter_2:
#    dec1, RA = print_random_star_coords(1)
#    dec1 = dec1*180/np.pi
#    RA = RA*180/np.pi
#    coord = SkyCoord(ra=RA, dec=dec1, unit=(u.deg, u.deg))
#    b = coord.galactic.b.deg
#    if ((b < 20 and b > -20) and (dec1 > 45 or dec1 < -45)):
#        points1.append([dec1, RA])
#        print(l)
#        l += 1
#a = 0


#while a < 9*iter_2:
#    dec1, RA = print_random_star_coords(1)
#    dec1 = dec1*180/np.pi
#    RA = RA*180/np.pi    
#    coord = SkyCoord(ra=RA, dec=dec1, unit=(u.deg, u.deg))
#    b = coord.galactic.b.deg            
#    if ((b < 20 and b > -20) and not(dec1 > 45 or dec1 < -45)):
#        points1.append([dec1, RA])          
#        a += 1    
#y = 0        
#while y < 55*iter_2:
#    dec1, RA = print_random_star_coords(1)
#    dec1 = dec1*180/np.pi
#    RA = RA*180/np.pi    
#    coord = SkyCoord(ra=RA, dec=dec1, unit=(u.deg, u.deg))
#    b = coord.galactic.b.deg
#    if (not(b < 20 and b > -20) and not(dec1 > 45 or dec1 < -45)):
#        points1.append([dec1, RA])
#        y += 1 
#c = 0
#while c < 20*iter_2:
#    dec1, RA = print_random_star_coords(1)
#    dec1 = dec1*180/np.pi
#    RA = RA*180/np.pi
#    coord = SkyCoord(ra=RA, dec=dec1, unit=(u.deg, u.deg))
#    b = coord.galactic.b.deg            
#    if (not(b < 20 and b > -20) and (dec1 > 45 or dec1 < -45)):
#        points1.append([dec1, RA])          
#        c += 1 

random.shuffle(points1)
slice_number = 0
k = 0
points_iters = []
while k < iter_2:
    closest_points = []
    print(k)
    sample = points1[slice_number:(slice_number+num)]
    slice_number += num
    nearest_neighbor(sample) 
    points_iters.append(closest_points)
    k += 1
closest_points = []
density_function_actual = []
points_actual = []
#converting to radians here
for (i, j) in zip(decs1, ras1):
    points_actual.append([i[0]*np.pi/180, j[0]*np.pi/180])
nearest_neighbor(points_actual)

density_function_actual.append(closest_points)
closest_points = []
points_actual2 = []
density_function_actual2 = []
for (i, j) in zip(decs2, ras2):
    points_actual2.append([i[0]*np.pi/180, j[0]*np.pi/180])
nearest_neighbor(points_actual2)
density_function_actual2.append(closest_points)
closest_points = []
points_actual3 = []
density_function_actual3 = []
for (i, j) in zip(decs3, ras3):
    #print(i)
    points_actual3.append([i[0]*np.pi/180, j[0]*np.pi/180])
nearest_neighbor(points_actual3)
density_function_actual3.append(closest_points)
closest_points = []
points_actual4 = []
density_function_actual4 = []
for (i, j) in zip(decs4, ras4):
    #print(i)
    points_actual4.append([i[0]*np.pi/180, j[0]*np.pi/180])
nearest_neighbor(points_actual4)
density_function_actual4.append(closest_points)
n_bins = 50
fig, ax = plt.subplots(figsize=(8, 8))
statistics_k_value = []
statistics_k_value1 = []
statistics_k_value2 = []
statistics_k_value3 = []
statistics_k_value4 = []
print(density_function_actual)
i = 0
while i < iter_2:
    compare_1 = points_iters[i]
    compare_2 = points_iters[i+1]
    #1 at the end returns p-value, 0 returns KS statistic
    statistics_k_value.append(stats.ks_2samp(compare_1, compare_2)[1])
    statistics_k_value1.append(stats.ks_2samp(compare_1, density_function_actual[0])[1])
    statistics_k_value1.append(stats.ks_2samp(compare_2, density_function_actual[0])[1])
    statistics_k_value3.append(stats.ks_2samp(compare_1, density_function_actual2[0])[1])
    statistics_k_value3.append(stats.ks_2samp(compare_2, density_function_actual2[0])[1])
    statistics_k_value4.append(stats.ks_2samp(compare_1, density_function_actual3[0])[1])
    statistics_k_value4.append(stats.ks_2samp(compare_2, density_function_actual3[0])[1])
    statistics_k_value2.append(stats.ks_2samp(compare_1, density_function_actual4[0])[1])
    statistics_k_value2.append(stats.ks_2samp(compare_2, density_function_actual4[0])[1])
    i += 2
#calculate amount that is less than the Monte Carlo mean
distribution = pd.Series(statistics_k_value3)
lessthan = distribution[distribution < mean(statistics_k_value)]
print(min(distribution))
greaterthan = distribution[distribution > mean(statistics_k_value)]
#use KDE so there is no visual confusion
for i in points_iters:
    sns.distplot(i, hist=False, hist_kws=dict(cumulative=True), kde_kws=dict(cumulative=True), bins = 50, color = 'g')
sns.distplot(density_function_actual,  hist= False, hist_kws=dict(cumulative=True), kde_kws=dict(cumulative=True), bins = 50, color='y')
sns.distplot(density_function_actual2,  hist= False,  hist_kws=dict(cumulative=True), kde_kws=dict(cumulative=True), bins = 50, color='r')
sns.distplot(density_function_actual3,  hist= False,   hist_kws=dict(cumulative=True), kde_kws=dict(cumulative=True), bins = 50, color='y')
sns.distplot(density_function_actual4,  hist= False,  hist_kws=dict(cumulative=True), kde_kws=dict(cumulative=True), bins = 50, color='y')

print(len(lessthan))
print(len(greaterthan))
print(len(distribution))
print(mean(statistics_k_value))
print(len(ras1))
print(len(ras2))
print(len(ras3))
print(len(ras4))
print(stats.ks_2samp(density_function_actual2[0], density_function_actual[0]))
print(stats.ks_2samp(density_function_actual3[0], density_function_actual[0]))
print(stats.ks_2samp(density_function_actual4[0], density_function_actual[0]))
print(stats.ks_2samp(density_function_actual2[0], density_function_actual3[0]))
print(stats.ks_2samp(density_function_actual2[0], density_function_actual4[0]))
print(stats.ks_2samp(density_function_actual3[0], density_function_actual4[0]))
