#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug 16 16:16:52 2019

@author: samchristian
"""
#generates samples with/without extinction
#and performs point radius method
import numpy as np
from numpy.random import power
import matplotlib.pyplot as plt
from astropy.coordinates import SkyCoord
from astropy import units as u
from sklearn.metrics.pairwise import haversine_distances as haversine
import pandas as pd
import time
import random
start_time = time.time()
# for large samples, it is useful to predict the time it will take
def print_random_star_coords(nstars):
    dec = np.arcsin(np.random.random(1)*2-1)
    RA = np.random.random(1)*2*np.pi
    return [dec[0]*180/np.pi, RA[0]*180/np.pi]
# returns degrees
def print_random_star_coords1(nstars):
    dec = np.arcsin(np.random.random(1)*2-1)
    RA = np.random.random(1)*2*np.pi
    return [dec[0], RA[0]]    
# returns radians
def bootstrap_point_method(points):
        i = 0
        num_in_distance = []
        while i < test_radii:
            in_distance = []
            test_point = print_random_star_coords1(1)
            j = 0
            while j < len(points):
                distance = haversine([test_point, points[j]]) 
                #Contrary to scikitlearn specifications, haversine takes radian arguements
                if distance[0][1] < radius:
                    in_distance.append(1)
                j += 1
            num_in_distance.append(len(in_distance))
            i += 1
        maxes.append(max(num_in_distance)) #Yes, I know this doesn't follow convention...
sky_dist = []
sky_cords = []
test_radii = 10000
z = 0
radius = 0.8953539
points1 = []
num = 75
iter_2 = 1000
print(z)
l = 0
while z < num*iter_2:
#while l < 3*iter_2:
#    dec, RA = print_random_star_coords(1)
#    coord = SkyCoord(ra=RA, dec=dec, unit=(u.deg, u.deg))
#    b = coord.galactic.b.deg
#    if ((b < 20 and b > -20) and (dec > 45 or dec < -45)):
#        points1.append([dec, RA])
#        l += 1         
#a = 0
#while a < 10*iter_2:
#    dec, RA = print_random_star_coords(1)
#    coord = SkyCoord(ra=RA, dec=dec, unit=(u.deg, u.deg))
#    b = coord.galactic.b.deg            
#    if ((b < 20 and b > -20) and not(dec > 45 or dec < -45)):
#        points1.append([dec, RA])          
#        a += 1    
#y = 0        
#while y < 27*iter_2:
#    dec, RA = print_random_star_coords(1)
#    coord = SkyCoord(ra=RA, dec=dec, unit=(u.deg, u.deg))
#    b = coord.galactic.b.deg
#    if (not(b < 20 and b > -20) and not(dec > 45 or dec < -45)):
#        points1.append([dec, RA])
#        y += 1 
#c = 0
#while c < 4*iter_2:
#    dec, RA = print_random_star_coords(1)
#    coord = SkyCoord(ra=RA, dec=dec, unit=(u.deg, u.deg))
#    b = coord.galactic.b.deg            
#    if (not(b < 20 and b > -20) and (dec > 45 or dec < -45)):
#        points1.append([dec, RA])          
#        c += 1   
# the above lines generate with extinction
    dec, RA = print_random_star_coords(1)
    points1.append([dec, RA])
    print(z)
    z += 1
    #The above 4 lines generate without extinction  
random.shuffle(points1)
#shuffle used so overall sample proportions are kept
slice_number = 0
k = 0
maxes = []
print('i')
while k < iter_2:
    print(k)
    sample = points1[slice_number:(slice_number+num)]
    slice_number += num
    bootstrap_point_method(sample)
    k += 1
print(maxes)
plt.hist(sky_dist, 50)
print()
print("--- %s seconds ---" % (time.time() - start_time))
max_df = pd.DataFrame(maxes)

max_df.to_csv(r'/Users/samchristian/Downloads/GRB_results_bootstrap1022.csv')
#This needs to be changed to your custom file path
